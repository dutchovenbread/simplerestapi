AWSTemplateFormatVersion: '2010-09-09'
Description: 'Simple REST API application deployed on EC2 with public IP'

Parameters:
  InstanceType:
    Type: String
    Description: EC2 instance type
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium

  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: Latest Amazon Linux 2023 AMI ID
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64

  KeyName:
    Type: String
    Description: EC2 Key Pair name (optional, for SSH access)
    Default: ''

  BucketName:
    Type: String
    Description: S3 Bucket name for application data
    Default: simplerestapi-bucket-20251012

Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]

Resources:
  DeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      AccessControl: Private
      VersioningConfiguration:
        Status: Disabled
      Tags:
        - Key: Name
          Value: !Ref BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
            BucketKeyEnabled: true

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: SimpleRestApiVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: SimpleRestApiIGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: SimpleRestApiPublicSubnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: SimpleRestApiPublicRT

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for REST API EC2 instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow HTTP traffic
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow HTTPS traffic
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
          Description: Allow application traffic
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: SimpleRestApiSG

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: SimpleRestApiInstanceRole

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref InstanceSecurityGroup
          SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -e
          
          # Update system
          yum update -y

          # Install Nginx
          sudo yum install -y nginx
          systemctl enable nginx
          systemctl start nginx
          
          # Install Python 3 and pip
          yum install -y python3 python3-pip
          
          # Create application directory
          mkdir -p /opt/simplerestapi
          cd /opt/simplerestapi
          
          # Create a placeholder for the application
          cat > app.py << 'EOF'
          from flask import Flask
          app = Flask(__name__)

          @app.route('/')
          def home():
              return {'status': 'ok', 'message': 'Simple REST API is running'}

          if __name__ == '__main__':
              app.run(host='0.0.0.0', port=8080)
          EOF
          
          # Create systemd service
          cat > /etc/systemd/system/simplerestapi.service << 'EOF'
          [Unit]
          Description=Simple REST API
          After=network.target
          
          [Service]
          Type=simple
          User=root
          WorkingDirectory=/opt/simplerestapi
          ExecStart=/usr/bin/python3 /opt/simplerestapi/app.py
          Restart=always
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Enable and start the service
          systemctl daemon-reload
          systemctl enable simplerestapi
          systemctl start simplerestapi
      Tags:
        - Key: Name
          Value: SimpleRestApiInstance

Outputs:
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref EC2Instance
    Export:
      Name: SimpleRestApiInstanceId

  PublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp
    Export:
      Name: SimpleRestApiPublicIP

  PublicDNS:
    Description: Public DNS name of the EC2 instance
    Value: !GetAtt EC2Instance.PublicDnsName
    Export:
      Name: SimpleRestApiPublicDNS

  ApiUrl:
    Description: URL to access the REST API
    Value: !Sub 'http://${EC2Instance.PublicIp}:8080'
    Export:
      Name: SimpleRestApiUrl
