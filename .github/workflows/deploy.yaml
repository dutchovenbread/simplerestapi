name: Deploy to AWS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  STACK_NAME: simple-rest-api

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Verify AWS credentials
        run: aws sts get-caller-identity
      - name: Validate Bucket CloudFormation template
        run: |
          aws cloudformation validate-template \
            --template-body file://cloudformation_dynamic/bucket.yaml
      - name: Deploy S3 Bucket Stack
        run: |
          aws cloudformation deploy \
            --template-file cloudformation_dynamic/bucket.yaml \
            --stack-name simplerestapi-bucket \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides BucketName=simplerestapi-bucket-20251016

      - name: Validate CloudFormation template
        run: |
          aws cloudformation validate-template \
            --template-body file://cloudformation_dynamic/application.yaml
      - name: Copy Files to S3 Bucket
        run: |
          aws s3 cp application/static_files/dummy.html s3://simplerestapi-bucket-20251016/dummy.html
          aws s3 cp application/static_files/dummy2.html s3://simplerestapi-bucket-20251016/dummy2.html
          aws s3 cp application/configuration/webservice.conf s3://simplerestapi-bucket-20251016/webservice.conf
          aws s3 cp application/app.py s3://simplerestapi-bucket-20251016/app.py
          aws s3 cp application/requirements.txt s3://simplerestapi-bucket-20251016/requirements.txt
      - name: Deploy CloudFormation stack for application
        run: |
          aws cloudformation deploy \
            --template-file cloudformation_dynamic/application.yaml \
            --stack-name ${{ env.STACK_NAME }} \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset

      - name: Get stack outputs
        id: stack-outputs
        run: |
          PUBLIC_IP=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`PublicIP`].OutputValue' \
            --output text)
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
            --output text)
          echo "public-ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
          echo "api-url=$API_URL" >> $GITHUB_OUTPUT

      - name: Wait for instance to be ready
        run: |
          echo "Waiting for EC2 instance to be ready..."
          sleep 60

      - name: Update application code
        run: |
          INSTANCE_ID=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`InstanceId`].OutputValue' \
            --output text)
          
          # Send application code to instance via SSM
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "cd /opt/simplerestapi",
              "cat > app.py << '\''EOF'\''",
              "$(cat application/app.py)",
              "EOF",
              "systemctl restart simplerestapi"
            ]' \
            --output text

      - name: Verify deployment
        run: |
          echo "Application deployed successfully!"
          echo "API URL: ${{ steps.stack-outputs.outputs.api-url }}"
          echo "Public IP: ${{ steps.stack-outputs.outputs.public-ip }}"
